<?php
/**
 * CMDApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TruEdit REST API
 *
 * Welcome to the TruEdit Platform REST API Reference! You can use this REST API to develop integrations between TruEdit and other applications or script interactions with TruEdit.
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CMDApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CMDApi {

	/**
	 * @var ClientInterface
	 */
	protected $client;

	/**
	 * @var Configuration
	 */
	protected $config;

	/**
	 * @param ClientInterface $client
	 * @param Configuration   $config
	 * @param HeaderSelector  $selector
	 */
	public function __construct(
		ClientInterface $client = null,
		Configuration $config = null,
		HeaderSelector $selector = null
	) {
		$this->client         = $client ?: new Client();
		$this->config         = $config ?: new Configuration();
		$this->headerSelector = $selector ?: new HeaderSelector();
	}

	/**
	 * @return Configuration
	 */
	public function getConfig() {
		return $this->config;
	}

	/**
	 * Operation deleteUsingDELETE1
	 *
	 * Delete a single CMD Field Object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResponseMessage
	 */
	public function deleteUsingDELETE1( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->deleteUsingDELETE1WithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation deleteUsingDELETE1WithHttpInfo
	 *
	 * Delete a single CMD Field Object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResponseMessage, HTTP status code, HTTP response headers (array of strings)
	 */
	public function deleteUsingDELETE1WithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResponseMessage';
		$request     = $this->deleteUsingDELETE1Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( $return_type === '\SplFileObject' ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( $return_type !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResponseMessage',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation deleteUsingDELETE1Async
	 *
	 * Delete a single CMD Field Object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteUsingDELETE1Async( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->deleteUsingDELETE1AsyncWithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation deleteUsingDELETE1AsyncWithHttpInfo
	 *
	 * Delete a single CMD Field Object.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function deleteUsingDELETE1AsyncWithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResponseMessage';
		$request     = $this->deleteUsingDELETE1Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( $return_type === '\SplFileObject' ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( $return_type !== 'string' ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'deleteUsingDELETE1'
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function deleteUsingDELETE1Request( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( null === $id ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling deleteUsingDELETE1'
			);
		}

		$resource_path = '/1/cmd/{id}';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( null !== $id ) {
			$resource_path = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resource_path
			);
		}

		// body params
		$_temp_body = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'DELETE',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation fetchAllUsingGET1
	 *
	 * Fetches all CMD Fields.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $if_modified_since If-Modified-Since (optional)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_
	 */
	public function fetchAllUsingGET1( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $if_modified_since = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchAllUsingGET1WithHttpInfo( $minimal, $page_number, $page_size, $order_by, $if_modified_since, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchAllUsingGET1WithHttpInfo
	 *
	 * Fetches all CMD Fields.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $if_modified_since If-Modified-Since (optional)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchAllUsingGET1WithHttpInfo( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $if_modified_since = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_';
		$request     = $this->fetchAllUsingGET1Request( $minimal, $page_number, $page_size, $order_by, $if_modified_since, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( '\SplFileObject' === $return_type ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( 'string' !== $return_type ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchAllUsingGET1Async
	 *
	 * Fetches all CMD Fields.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $if_modified_since If-Modified-Since (optional)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchAllUsingGET1Async( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $if_modified_since = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchAllUsingGET1AsyncWithHttpInfo( $minimal, $page_number, $page_size, $order_by, $if_modified_since, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchAllUsingGET1AsyncWithHttpInfo
	 *
	 * Fetches all CMD Fields.
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $if_modified_since If-Modified-Since (optional)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchAllUsingGET1AsyncWithHttpInfo( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $if_modified_since = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_';
		$request     = $this->fetchAllUsingGET1Request( $minimal, $page_number, $page_size, $order_by, $if_modified_since, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchAllUsingGET1'
	 *
	 * @param  bool $minimal minimal (optional, default to false)
	 * @param  int $page_number pageNumber (optional, default to 1)
	 * @param  int $page_size pageSize (optional, default to 100)
	 * @param  string[] $order_by orderBy (optional, default to name asc)
	 * @param  string $if_modified_since If-Modified-Since (optional)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchAllUsingGET1Request( $minimal = 'false', $page_number = '1', $page_size = '100', $order_by = 'name asc', $if_modified_since = null, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {

		$resource_path = '/1/cmd';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// query params
		if ( null !== $minimal ) {
			$query_params['minimal'] = ObjectSerializer::toQueryValue( $minimal );
		}
		// query params
		if ( null !== $page_number ) {
			$query_params['pageNumber'] = ObjectSerializer::toQueryValue( $page_number );
		}
		// query params
		if ( null !== $page_size ) {
			$query_params['pageSize'] = ObjectSerializer::toQueryValue( $page_size );
		}
		// query params
		if ( is_array( $order_by ) ) {
			$order_by = ObjectSerializer::serializeCollection( $order_by, 'multi', true );
		}
		if ( null !== $order_by ) {
			$query_params['orderBy'] = ObjectSerializer::toQueryValue( $order_by );
		}
		// header params
		if ( null !== $if_modified_since ) {
			$header_params['If-Modified-Since'] = ObjectSerializer::toHeaderValue( $if_modified_since );
		}
		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_temp_body = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'GET',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation fetchDataTypesUsingGET
	 *
	 * Fetches CMD Field data types.
	 *
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_
	 */
	public function fetchDataTypesUsingGET( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchDataTypesUsingGETWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchDataTypesUsingGETWithHttpInfo
	 *
	 * Fetches CMD Field data types.
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchDataTypesUsingGETWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request     = $this->fetchDataTypesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( '\SplFileObject' === $return_type ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( $return_type !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchDataTypesUsingGETAsync
	 *
	 * Fetches CMD Field data types.
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchDataTypesUsingGETAsync( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchDataTypesUsingGETAsyncWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchDataTypesUsingGETAsyncWithHttpInfo
	 *
	 * Fetches CMD Field data types.
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchDataTypesUsingGETAsyncWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request     = $this->fetchDataTypesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchDataTypesUsingGET'
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchDataTypesUsingGETRequest( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {

		$resource_path = '/1/cmd/dataType';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_temp_body = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'GET',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation fetchUIDataTypesUsingGET
	 *
	 * Fetches CMD Field UI data types.
	 *
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_
	 */
	public function fetchUIDataTypesUsingGET( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchUIDataTypesUsingGETWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchUIDataTypesUsingGETWithHttpInfo
	 *
	 * Fetches CMD Field UI data types.
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseReferenceV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchUIDataTypesUsingGETWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request     = $this->fetchUIDataTypesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( $return_type === '\SplFileObject' ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( $return_type !== 'string' ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchUIDataTypesUsingGETAsync
	 *
	 * Fetches CMD Field UI data types.
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchUIDataTypesUsingGETAsync( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchUIDataTypesUsingGETAsyncWithHttpInfo( $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchUIDataTypesUsingGETAsyncWithHttpInfo
	 *
	 * Fetches CMD Field UI data types.
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchUIDataTypesUsingGETAsyncWithHttpInfo( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseReferenceV1TO_';
		$request     = $this->fetchUIDataTypesUsingGETRequest( $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchUIDataTypesUsingGET'
	 *
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchUIDataTypesUsingGETRequest( $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {

		$resource_path = '/1/cmd/dataType/ui';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_temp_body = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( $headers['Content-Type'] === 'application/json' ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'GET',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation fetchUsingGET1
	 *
	 * Fetch a specific CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_
	 */
	public function fetchUsingGET1( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->fetchUsingGET1WithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation fetchUsingGET1WithHttpInfo
	 *
	 * Fetch a specific CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function fetchUsingGET1WithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_';
		$request     = $this->fetchUsingGET1Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( '\SplFileObject' === $return_type ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( 'string' !== $return_type ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation fetchUsingGET1Async
	 *
	 * Fetch a specific CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchUsingGET1Async( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->fetchUsingGET1AsyncWithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation fetchUsingGET1AsyncWithHttpInfo
	 *
	 * Fetch a specific CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function fetchUsingGET1AsyncWithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_';
		$request     = $this->fetchUsingGET1Request( $id, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'fetchUsingGET1'
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function fetchUsingGET1Request( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( null === $id ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling fetchUsingGET1'
			);
		}

		$resource_path = '/1/cmd/{id}';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( null !== $id ) {
			$resource_path = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resource_path
			);
		}

		// body params
		$_temp_body = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && $headers['Content-Type'] === 'application/json' ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'GET',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation saveUsingPOST1
	 *
	 * Create one or more CMD Fields.
	 *
	 * @param  \Swagger\Client\Model\CMDFieldV1ListTO $cmd_fields cmdFields (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_
	 */
	public function saveUsingPOST1( $cmd_fields, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->saveUsingPOST1WithHttpInfo( $cmd_fields, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation saveUsingPOST1WithHttpInfo
	 *
	 * Create one or more CMD Fields.
	 *
	 * @param  \Swagger\Client\Model\CMDFieldV1ListTO $cmd_fields cmdFields (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function saveUsingPOST1WithHttpInfo( $cmd_fields, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_';
		$request     = $this->saveUsingPOST1Request( $cmd_fields, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( '\SplFileObject' === $return_type ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( 'string' !== $return_type ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation saveUsingPOST1Async
	 *
	 * Create one or more CMD Fields.
	 *
	 * @param  \Swagger\Client\Model\CMDFieldV1ListTO $cmd_fields cmdFields (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function saveUsingPOST1Async( $cmd_fields, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->saveUsingPOST1AsyncWithHttpInfo( $cmd_fields, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation saveUsingPOST1AsyncWithHttpInfo
	 *
	 * Create one or more CMD Fields.
	 *
	 * @param  \Swagger\Client\Model\CMDFieldV1ListTO $cmd_fields cmdFields (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function saveUsingPOST1AsyncWithHttpInfo( $cmd_fields, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1ResultListResponseCMDFieldV1TO_';
		$request     = $this->saveUsingPOST1Request( $cmd_fields, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'saveUsingPOST1'
	 *
	 * @param  \Swagger\Client\Model\CMDFieldV1ListTO $cmd_fields cmdFields (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function saveUsingPOST1Request( $cmd_fields, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'cmd_fields' is set
		if ( null === $cmd_fields ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $cmd_fields when calling saveUsingPOST1'
			);
		}

		$resource_path = '/1/cmd';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// body params
		$_temp_body = null;
		if ( isset( $cmd_fields ) ) {
			$_temp_body = $cmd_fields;
		}

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[ 'application/json' ]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'POST',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation setFormFileUsingPOST
	 *
	 * Set a form file to a CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_
	 */
	public function setFormFileUsingPOST( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->setFormFileUsingPOSTWithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation setFormFileUsingPOSTWithHttpInfo
	 *
	 * Set a form file to a CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function setFormFileUsingPOSTWithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_';
		$request     = $this->setFormFileUsingPOSTRequest( $id, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( '\SplFileObject' === $return_type ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( 'string' !== $return_type ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation setFormFileUsingPOSTAsync
	 *
	 * Set a form file to a CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function setFormFileUsingPOSTAsync( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->setFormFileUsingPOSTAsyncWithHttpInfo( $id, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation setFormFileUsingPOSTAsyncWithHttpInfo
	 *
	 * Set a form file to a CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function setFormFileUsingPOSTAsyncWithHttpInfo( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_';
		$request     = $this->setFormFileUsingPOSTRequest( $id, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'setFormFileUsingPOST'
	 *
	 * @param  int $id id (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function setFormFileUsingPOSTRequest( $id, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( null === $id ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling setFormFileUsingPOST'
			);
		}

		$resource_path = '/1/cmd/{id}/file';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( null !== $id ) {
			$resource_path = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resource_path
			);
		}

		// body params
		$_temp_body = null;

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[ 'application/json' ]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'POST',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Operation updateUsingPUT1
	 *
	 * Update one CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\CMDFieldV1TO $cmd_field_v1_to cmdFieldV1TO (required)
	 * @param  string $x_api_key x_api_key (optional)
	 * @param  string $x_app_api_key x_app_api_key (optional)
	 * @param  string $accept_language accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return \Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_
	 */
	public function updateUsingPUT1( $id, $cmd_field_v1_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		list($response) = $this->updateUsingPUT1WithHttpInfo( $id, $cmd_field_v1_to, $x_api_key, $x_app_api_key, $accept_language );
		return $response;
	}

	/**
	 * Operation updateUsingPUT1WithHttpInfo
	 *
	 * Update one CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\CMDFieldV1TO $cmd_field_v1_to cmdFieldV1TO (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \Swagger\Client\ApiException on non-2xx response
	 * @throws \InvalidArgumentException
	 * @return array of \Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_, HTTP status code, HTTP response headers (array of strings)
	 */
	public function updateUsingPUT1WithHttpInfo( $id, $cmd_field_v1_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_';
		$request     = $this->updateUsingPUT1Request( $id, $cmd_field_v1_to, $x_api_key, $x_app_api_key, $accept_language );

		try {
			$options = $this->createHttpClientOption();
			try {
				$response = $this->client->send( $request, $options );
			} catch ( RequestException $e ) {
				throw new ApiException(
					"[{$e->getCode()}] {$e->getMessage()}",
					$e->getCode(),
					$e->getResponse() ? $e->getResponse()->getHeaders() : null,
					$e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
				);
			}

			$status_code = $response->getStatusCode();

			if ( $status_code < 200 || $status_code > 299 ) {
				throw new ApiException(
					sprintf(
						'[%d] Error connecting to the API (%s)',
						$status_code,
						$request->getUri()
					),
					$status_code,
					$response->getHeaders(),
					$response->getBody()
				);
			}

			$response_body = $response->getBody();
			if ( '\SplFileObject' === $return_type ) {
				$content = $response_body; //stream goes to serializer
			} else {
				$content = $response_body->getContents();
				if ( 'string' !== $return_type ) {
					$content = json_decode( $content );
				}
			}

			return [
				ObjectSerializer::deserialize( $content, $return_type, [] ),
				$response->getStatusCode(),
				$response->getHeaders(),
			];

		} catch ( ApiException $e ) {
			switch ( $e->getCode() ) {
				case 200:
					$data = ObjectSerializer::deserialize(
						$e->getResponseBody(),
						'\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_',
						$e->getResponseHeaders()
					);
					$e->setResponseObject( $data );
					break;
			}
			throw $e;
		}
	}

	/**
	 * Operation updateUsingPUT1Async
	 *
	 * Update one CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\CMDFieldV1TO $cmd_field_v1_to cmdFieldV1TO (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function updateUsingPUT1Async( $id, $cmd_field_v1_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		return $this->updateUsingPUT1AsyncWithHttpInfo( $id, $cmd_field_v1_to, $x_api_key, $x_app_api_key, $accept_language )
			->then(
				function ( $response ) {
					return $response[0];
				}
			);
	}

	/**
	 * Operation updateUsingPUT1AsyncWithHttpInfo
	 *
	 * Update one CMD Field.
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\CMDFieldV1TO $cmd_field_v1_to cmdFieldV1TO (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Promise\PromiseInterface
	 */
	public function updateUsingPUT1AsyncWithHttpInfo( $id, $cmd_field_v1_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		$return_type = '\Swagger\Client\Model\API1SingleResultResponseCMDFieldV1TO_';
		$request     = $this->updateUsingPUT1Request( $id, $cmd_field_v1_to, $x_api_key, $x_app_api_key, $accept_language );

		return $this->client
			->sendAsync( $request, $this->createHttpClientOption() )
			->then(
				function ( $response ) use ( $return_type ) {
					$response_body = $response->getBody();
					if ( '\SplFileObject' === $return_type ) {
						$content = $response_body; //stream goes to serializer
					} else {
						$content = $response_body->getContents();
						if ( 'string' !== $return_type ) {
							$content = json_decode( $content );
						}
					}

					return [
						ObjectSerializer::deserialize( $content, $return_type, [] ),
						$response->getStatusCode(),
						$response->getHeaders(),
					];
				},
				function ( $exception ) {
					$response    = $exception->getResponse();
					$status_code = $response->getStatusCode();
					throw new ApiException(
						sprintf(
							'[%d] Error connecting to the API (%s)',
							$status_code,
							$exception->getRequest()->getUri()
						),
						$status_code,
						$response->getHeaders(),
						$response->getBody()
					);
				}
			);
	}

	/**
	 * Create request for operation 'updateUsingPUT1'
	 *
	 * @param  int $id id (required)
	 * @param  \Swagger\Client\Model\CMDFieldV1TO $cmd_field_v1_to cmdFieldV1TO (required)
	 * @param  string $x_api_key (optional)
	 * @param  string $x_app_api_key (optional)
	 * @param  string $accept_language (optional)
	 *
	 * @throws \InvalidArgumentException
	 * @return \GuzzleHttp\Psr7\Request
	 */
	protected function updateUsingPUT1Request( $id, $cmd_field_v1_to, $x_api_key = null, $x_app_api_key = null, $accept_language = null ) {
		// verify the required parameter 'id' is set
		if ( null === $id ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $id when calling updateUsingPUT1'
			);
		}
		// verify the required parameter 'cmd_field_v1_to' is set
		if ( null === $cmd_field_v1_to ) {
			throw new \InvalidArgumentException(
				'Missing the required parameter $cmd_field_v1_to when calling updateUsingPUT1'
			);
		}

		$resource_path = '/1/cmd/{id}';
		$form_params   = [];
		$query_params  = [];
		$header_params = [];
		$http_body     = '';
		$multipart     = false;

		// header params
		if ( null !== $x_api_key ) {
			$header_params['x-api-key'] = ObjectSerializer::toHeaderValue( $x_api_key );
		}
		// header params
		if ( null !== $x_app_api_key ) {
			$header_params['x-app-api-key'] = ObjectSerializer::toHeaderValue( $x_app_api_key );
		}
		// header params
		if ( null !== $accept_language ) {
			$header_params['Accept-Language'] = ObjectSerializer::toHeaderValue( $accept_language );
		}

		// path params
		if ( null !== $id ) {
			$resource_path = str_replace(
				'{' . 'id' . '}',
				ObjectSerializer::toPathValue( $id ),
				$resource_path
			);
		}

		// body params
		$_temp_body = null;
		if ( isset( $cmd_field_v1_to ) ) {
			$_temp_body = $cmd_field_v1_to;
		}

		if ( $multipart ) {
			$headers = $this->headerSelector->selectHeadersForMultipart(
				[ '*/*' ]
			);
		} else {
			$headers = $this->headerSelector->selectHeaders(
				[ '*/*' ],
				[ 'application/json' ]
			);
		}

		// for model (json/xml)
		if ( isset( $_temp_body ) ) {
			// $_temp_body is the method argument, if present
			$http_body = $_temp_body;
			// \stdClass has no __toString(), so we should encode it manually
			if ( $http_body instanceof \stdClass && 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $http_body );
			}
		} elseif ( count( $form_params ) > 0 ) {
			if ( $multipart ) {
				$multipart_contents = [];
				foreach ( $form_params as $form_param_name => $form_param_value ) {
					$multipart_contents[] = [
						'name'     => $form_param_name,
						'contents' => $form_param_value,
					];
				}
				// for HTTP post (form)
				$http_body = new MultipartStream( $multipart_contents );

			} elseif ( 'application/json' === $headers['Content-Type'] ) {
				$http_body = \GuzzleHttp\json_encode( $form_params );

			} else {
				// for HTTP post (form)
				$http_body = \GuzzleHttp\Psr7\build_query( $form_params );
			}
		}

		$default_headers = [];
		if ( $this->config->getUserAgent() ) {
			$default_headers['User-Agent'] = $this->config->getUserAgent();
		}

		$headers = array_merge(
			$default_headers,
			$header_params,
			$headers
		);

		$query = \GuzzleHttp\Psr7\build_query( $query_params );
		return new Request(
			'PUT',
			$this->config->getHost() . $resource_path . ( $query ? "?{$query}" : '' ),
			$headers,
			$http_body
		);
	}

	/**
	 * Create http client option
	 *
	 * @throws \RuntimeException on file opening failure
	 * @return array of http client options
	 */
	protected function createHttpClientOption() {
		$options = [];
		if ( $this->config->getDebug() ) {
			$options[ RequestOptions::DEBUG ] = fopen( $this->config->getDebugFile(), 'a' );
			if ( ! $options[ RequestOptions::DEBUG ] ) {
				throw new \RuntimeException( 'Failed to open the debug file: ' . $this->config->getDebugFile() );
			}
		}

		return $options;
	}
}
